{"/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/test.js":"/* istanbul instrument in package npmtest_paypal_rest_sdk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/lib.npmtest_paypal_rest_sdk.js":"/* istanbul instrument in package npmtest_paypal_rest_sdk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_paypal_rest_sdk = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_paypal_rest_sdk = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-paypal-rest-sdk && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_paypal_rest_sdk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_paypal_rest_sdk\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_paypal_rest_sdk.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_paypal_rest_sdk.rollup.js'] =\n            local.assetsDict['/assets.npmtest_paypal_rest_sdk.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_paypal_rest_sdk.__dirname + '/lib.npmtest_paypal_rest_sdk.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/index.js":"module.exports = require('./lib/paypal-rest-sdk.js')();\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/paypal-rest-sdk.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar configuration = require('./configure');\nvar api = require('./api');\n\nmodule.exports = function () {\n\n    function configure(options) {\n        api.configure(options);\n    }\n\n    function generateToken(config, cb) {\n        api.generateToken(config, cb);\n    }\n\n    return {\n        version: configuration.sdkVersion,\n        configure: configure,\n        configuration: configuration.default_options,\n        generateToken: generateToken,\n        payment: require('./resources/Payment')(),\n        sale: require('./resources/Sale')(),\n        refund: require('./resources/Refund')(),\n        authorization: require('./resources/Authorization')(),\n        capture: require('./resources/Capture')(),\n        order: require('./resources/Order')(),\n        payout: require('./resources/Payout')(),\n        payoutItem: require('./resources/PayoutItem')(),\n        billingPlan: require('./resources/BillingPlan')(),\n        billingAgreement: require('./resources/BillingAgreement')(),\n        creditCard: require('./resources/CreditCard')(),\n        invoice: require('./resources/Invoice')(),\n        invoiceTemplate: require('./resources/InvoiceTemplate')(),\n        openIdConnect: require('./resources/OpenIdConnect')(),\n        webProfile: require('./resources/WebProfile')(),\n        notification: require('./resources/Notification')(),\n        //entries below are deprecated but provided for compatibility with 0.* versions\n        generate_token: generateToken,\n        billing_plan: require('./resources/BillingPlan')(),\n        billing_agreement: require('./resources/BillingAgreement')(),\n        credit_card: require('./resources/CreditCard')(),\n        openid_connect: require('./resources/OpenIdConnect')()\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/configure.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar sdkVersion = exports.sdkVersion = require('../package').version;\nvar userAgent = exports.userAgent = 'PayPalSDK/PayPal-node-SDK ' + sdkVersion + ' (node ' + process.version + '-' + process.arch + '-' + process.platform  + '; OpenSSL ' + process.versions.openssl + ')';\n\nvar default_options = exports.default_options = {\n    'mode': 'sandbox',\n    'schema': 'https',\n    'host': 'api.sandbox.paypal.com',\n    'port': '',\n    'openid_connect_schema': 'https',\n    'openid_connect_host': 'api.sandbox.paypal.com',\n    'openid_connect_port': '',\n    'authorize_url': 'https://www.sandbox.paypal.com/signin/authorize',\n    'logout_url': 'https://www.sandbox.paypal.com/webapps/auth/protocol/openidconnect/v1/endsession',\n    'headers': {}\n};\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/api.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar client = require('./client');\nvar utils = require('./utils');\nvar configuration = require('./configure');\n\n/**\n * token_persist client id to access token cache, used to reduce access token round trips\n * @type {Object}\n */\nvar token_persist = {};\n\n/**\n * Set up configuration globally such as client_id and client_secret,\n * by merging user provided configurations otherwise use default settings\n * @param  {Object} options Configuration parameters passed as object\n * @return {undefined}        \n */\nvar configure = exports.configure = function configure(options) {\n    if (options !== undefined && typeof options === 'object') {\n        configuration.default_options = utils.merge(configuration.default_options, options);\n    }\n};\n\n/**\n * Generate new access token by making a POST request to /oauth2/token by\n * exchanging base64 encoded client id/secret pair or valid refresh token.\n *\n * Otherwise authorization code from a mobile device can be exchanged for a long\n * living refresh token used to charge user who has consented to future payments.\n * @param  {Object|Function}   config Configuration parameters such as authorization code or refresh token\n * @param  {Function} cb     Callback function\n * @return {String}          Access token or Refresh token\n */\nvar generateToken = exports.generateToken = function generateToken(config, cb) {\n\n    if (typeof config === \"function\") {\n        cb = config;\n        config = configuration.default_options;\n    } else if (!config) {\n        config = configuration.default_options;\n    } else {\n        config = utils.merge(config, configuration.default_options, true);\n    }\n\n    var payload = 'grant_type=client_credentials';\n    if (config.authorization_code) {\n        payload = 'grant_type=authorization_code&response_type=token&redirect_uri=urn:ietf:wg:oauth:2.0:oob&code=' + config.authorization_code;\n    } else if (config.refresh_token) {\n        payload = 'grant_type=refresh_token&refresh_token=' + config.refresh_token;\n    }\n\n    var basicAuthString = 'Basic ' + new Buffer(config.client_id + ':' + config.client_secret).toString('base64');\n\n    var http_options = {\n        schema: config.schema || configuration.default_options.schema,\n        host: utils.getDefaultApiEndpoint(config.mode) || config.host || configuration.default_options.host,\n        port: config.port || configuration.default_options.port,\n        headers: utils.merge({\n            'Authorization': basicAuthString,\n            'Accept': 'application/json',\n            'Content-Type': 'application/x-www-form-urlencoded'\n        }, configuration.default_options.headers, true)\n    };\n\n    client.invoke('POST', '/v1/oauth2/token', payload, http_options, function (err, res) {\n        var token = null;\n        if (res) {\n            if (!config.authorization_code && !config.refresh_token) {\n                var seconds = new Date().getTime() / 1000;\n                token_persist[config.client_id] = res;\n                token_persist[config.client_id].created_at = seconds;\n            }\n\n            if (!config.authorization_code) {\n                token = res.token_type + ' ' + res.access_token;\n            }\n            else {\n                token = res.refresh_token;\n            }\n        }\n        cb(err, token);\n    });\n};\n\n/* Update authorization header with new token obtained by calling\ngenerateToken */\n/**\n * Updates http Authorization header to newly created access token\n * @param  {Object}   http_options   Configuration parameters such as authorization code or refresh token\n * @param  {Function}   error_callback \n * @param  {Function} callback       \n */\nfunction updateToken(http_options, error_callback, callback) {\n    generateToken(http_options, function (error, token) {\n        if (error) {\n            error_callback(error, token);\n        } else {\n            http_options.headers.Authorization = token;\n            callback();\n        }\n    });\n}\n\n/**\n * Makes a PayPal REST API call. Reuses valid access tokens to reduce\n * round trips, handles 401 error and token expiration.\n * @param  {String}   http_method           A HTTP Verb e.g. GET or POST\n * @param  {String}   path                  Url endpoint for API request\n * @param  {Data}   data                    Payload associated with API request\n * @param  {Object|Function}   http_options Configurations for settings and Auth\n * @param  {Function} cb                    Callback function\n */\nvar executeHttp = exports.executeHttp = function executeHttp(http_method, path, data, http_options, cb) {\n    if (typeof http_options === \"function\") {\n        cb = http_options;\n        http_options = null;\n    }\n    if (!http_options) {\n        http_options = configuration.default_options;\n    } else {\n        http_options = utils.merge(http_options, configuration.default_options, true);\n    }\n\n    //Get host endpoint using mode\n    http_options.host = utils.getDefaultApiEndpoint(http_options.mode) || http_options.host;\n\n    function retryInvoke() {\n        client.invoke(http_method, path, data, http_options, cb);\n    }\n\n    // correlation-id is deprecated in favor of client-metadata-id\n    if (http_options.client_metadata_id) {\n        http_options.headers['Paypal-Client-Metadata-Id'] = http_options.client_metadata_id;\n    }\n    else if (http_options.correlation_id) {\n        http_options.headers['Paypal-Client-Metadata-Id'] = http_options.correlation_id;\n    }\n\n    // If client_id exists with an unexpired token and a refresh token is not provided, reuse cached token    \n    if (http_options.client_id in token_persist && !utils.checkExpiredToken(token_persist[http_options.client_id]) && !http_options.refresh_token) {\n        http_options.headers.Authorization = \"Bearer \" + token_persist[http_options.client_id].access_token;\n        client.invoke(http_method, path, data, http_options, function (error, response) {\n            // Don't reprompt already authenticated user for login by updating Authorization header\n            // if token expires\n            if (error && error.httpStatusCode === 401 && http_options.client_id && http_options.headers.Authorization) {\n                http_options.headers.Authorization = null;\n                updateToken(http_options, cb, retryInvoke);\n            } else {\n                cb(error, response);\n            }\n        });\n    } else {\n        updateToken(http_options, cb, retryInvoke);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/client.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar http = require('http');\nvar https = require('https');\nvar querystring = require('querystring');\nvar uuid = require('uuid');\nvar configuration = require('./configure');\nvar semver = require('semver');\n\n/**\n * Wraps the http client, handles request parameters, populates request headers, handles response\n * @param  {String}   http_method        HTTP Method GET/POST\n * @param  {String}   path               url endpoint\n * @param  {Object}   data               Payload for HTTP Request\n * @param  {Object}   http_options_param Configuration parameters\n * @param  {Function} cb                 [description]\n */\nvar invoke = exports.invoke = function invoke(http_method, path, data, http_options_param, cb) {\n    var client = (http_options_param.schema === 'http') ? http : https;\n\n    var request_data = data;\n\n    if (http_method === 'GET') {\n        //format object parameters into GET request query string\n        if (typeof request_data !== 'string') {\n            request_data = querystring.stringify(request_data);\n        }\n        if (request_data) {\n            path = path + \"?\" + request_data;\n            request_data = \"\";\n        }\n    } else if (typeof request_data !== 'string') {\n        request_data = JSON.stringify(request_data);\n    }\n\n    var http_options = {};\n\n    if (http_options_param) {\n\n        http_options = JSON.parse(JSON.stringify(http_options_param));\n\n        if (!http_options.headers) {\n            http_options.headers = {};\n        }\n        http_options.path = path;\n        http_options.method = http_method;\n        if (request_data) {\n            http_options.headers['Content-Length'] = Buffer.byteLength(request_data, 'utf-8');\n        }\n\n        if (!http_options.headers.Accept) {\n            http_options.headers.Accept = 'application/json';\n        }\n\n        if (!http_options.headers['Content-Type']) {\n            http_options.headers['Content-Type'] = 'application/json';\n        }\n\n        if (http_method === 'POST' && !http_options.headers['PayPal-Request-Id']) {\n            http_options.headers['PayPal-Request-Id'] = uuid.v4();\n        }\n\n        http_options.headers['User-Agent'] = configuration.userAgent;\n        http_options.withCredentials = false;\n    }\n\n    // Enable full request response logging in development/non-production environment only\n    if (configuration.default_options.mode !== 'live' && process.env.NODE_ENV === 'development') {\n        console.dir(JSON.stringify(http_options.headers));\n        console.dir(request_data);\n    }\n\n    //PCI compliance\n    if (process.versions !== undefined && process.versions.openssl !== undefined && semver.lt(process.versions.openssl.slice(0, 5), '1.0.1')) {\n        console.warn('WARNING: openssl version ' + process.versions.openssl + ' detected. Per PCI Security Council mandate (https://github.com/paypal/TLS-update), you MUST update to the latest security library.');\n    }\n\n    var req = client.request(http_options);\n    req.on('error', function (e) {\n        console.log('problem with request: ' + e.message);\n        cb(e, null);\n    });\n\n    req.on('response', function (res) {\n        var response = '';\n        //do not setEndcoding with browserify\n        if (res.setEncoding) {\n            res.setEncoding('utf8');\n        }\n\n        res.on('data', function (chunk) {\n            response += chunk;\n        });\n\n        res.on('end', function () {\n            var err = null;\n\n            try {\n                //TURN NODE_ENV to development to get access to paypal-debug-id\n                //for questions to merchant technical services.\n                if (res.headers['paypal-debug-id'] !== undefined && process.env.NODE_ENV === 'development') {\n                    console.log('paypal-debug-id: ' + res.headers['paypal-debug-id']);\n\n                    if (configuration.default_options.mode !== 'live') {\n                        console.dir(JSON.stringify(res.headers));\n                        console.dir(response);\n                    }\n                }\n\n                //Set response to be parsed JSON object if data received is json\n                //expect that content-type header has application/json when it\n                //returns data\n                if (typeof res.headers['content-type'] === \"string\" &&\n                    res.headers['content-type'].match(/^application\\/json(?:;.*)?$/) !== null) {\n                    response = JSON.parse(response);\n                }\n                //Set response to an empty object if no data was received\n                if (response === '') {\n                    response = {};\n                }\n                response.httpStatusCode = res.statusCode;\n            } catch (e) {\n                err = new Error('Invalid JSON Response Received. If the response received is empty, please check' +\n                 'the httpStatusCode attribute of error message for 401 or 403. It is possible that the client credentials' +\n                  'are invalid for the environment you are using, be it live or sandbox.');\n                err.error = {\n                    name: 'Invalid JSON Response Received, JSON Parse Error.'\n                };\n                err.response = response;\n                err.httpStatusCode = res.statusCode;\n                response = null;\n            }\n\n            if (!err && (res.statusCode < 200 || res.statusCode >= 300)) {\n                err = new Error('Response Status : ' + res.statusCode);\n                // response contains the full json description of the error\n                // that PayPal returns and information link\n                err.response = response;\n                if (process.env.NODE_ENV === 'development') {\n                    err.response_stringified = JSON.stringify(response);\n                }\n                err.httpStatusCode = res.statusCode;\n                response = null;\n            }\n            cb(err, response);\n        });\n    });\n\n    if (request_data) {\n        req.write(request_data);\n    }\n    req.end();\n};\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/utils.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\nvar https = require('https');\nvar isArray = Array.isArray;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar getDefaultEndpoint = exports.getDefaultEndpoint = function getDefaultEndpoint(mode) {\n    return (typeof mode === \"string\" && mode === \"live\") ? \"paypal.com\" : \"sandbox.paypal.com\";\n};\n\nvar getDefaultApiEndpoint = exports.getDefaultApiEndpoint = function getDefaultApiEndpoint(mode) {\n    var api = (typeof mode === \"string\" && mode === \"security-test-sandbox\") ? \"test-api.\" : \"api.\";\n    return api + getDefaultEndpoint(mode);\n};\n\n/**\n * Recursively copies given object into a new object. Helper method for merge\n * @param  {Object} v\n * @return {Object}\n */\nfunction clone(v) {\n    if (v === null || typeof v !== \"object\") {\n        return v;\n    }\n\n    if (isArray(v)) {\n        var arr = v.slice();\n        for (var i = 0; i < v.length; i++) {\n            arr[i] = clone(arr[i]);\n        }\n        return arr;\n    }\n    else {\n        var obj = {};\n        for (var k in v) {\n            obj[k] = clone(v[k]);\n        }\n        return obj;\n    }\n}\n\n/**\n * Merges two Objects recursively, setting property of obj1 to those of obj2\n * and creating property as necessary. \n *\n * Implementation suggested by @kobalicek on https://github.com/paypal/PayPal-node-SDK/issues/69\n * @param  {Object} obj1 \n * @param  {Object} obj2 \n * @return {Object}     \n */\nvar merge = exports.merge = function merge(obj1, obj2, appendOnly) {\n\n    //Handle invalid arguments\n    if (obj1 === null || typeof obj1 !== \"object\") {\n        throw new TypeError(\"merge() - first parameter has to be an object, not \" + typeof obj1 + \".\");\n    }\n\n    if (obj2 === null || typeof obj2 !== \"object\") {\n        throw new TypeError(\"merge() - first parameter has to be an object, not \" + typeof obj2 + \".\");\n    }\n\n    if (isArray(obj1) || isArray(obj2)) {\n        throw new TypeError(\"merge() - Unsupported for arrays.\");\n    }\n\n    for (var k in obj2) {\n        var obj1Val, obj2Val = obj2[k];\n        if (hasOwn.call(obj1, k)) {\n            if (!appendOnly) {\n                obj1Val = obj1[k];\n                if (obj1Val !== null && typeof obj1Val === \"object\" &&\n                        obj2Val !== null && typeof obj2Val === \"object\") {\n                    merge(obj1Val, obj2Val);\n                }\n                else {\n                    obj1[k] = clone(obj2Val);\n                }\n            }\n        }\n        else {\n            obj1[k] = clone(obj2Val);\n        }\n    }\n    return obj1;\n};\n\n/**\n * Checks if access token for client id has expired\n * @param  {Object} token_hash  object returned from paypal access token request\n *                              with expires_in set and sdk sets the created_at\n * @return {Boolean}            true if token expired else false\n */\nvar checkExpiredToken = exports.checkExpiredToken = function checkExpiredToken(token_hash) {\n    var delta = (new Date().getTime() / 1000) - token_hash.created_at;\n    return (delta < token_hash.expires_in) ? false : true;\n};\n\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/Payment.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\n\n/**\n * Create or get details of payments\n * @return {Object} Payment functions\n */\nfunction payment() {\n    var baseURL = '/v1/payments/payment/';\n    var operations = ['create', 'update', 'get', 'list'];\n\n    var ret = {\n        baseURL: baseURL,\n        /**\n         * Execute(complete) a PayPal or payment that has been approved by the payer\n         * @param  {String}   id     Payment identifier\n         * @param  {Object}   data   Transaction details if updating a payment\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb     \n         * @return {Object}          Payment object for completed PayPal payment\n         */\n        execute: function execute(id, data, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/execute', data, config, cb);\n        }\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = payment;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/generate.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\nvar api = require('./api');\n\n/**\n * Attach REST operations from restFunctions as required by a PayPal API\n * resource e.g. create, get and list are attahed for Payment resource\n * @param  {Object} destObject A PayPal resource e.g. Invoice\n * @param  {Array} operations Rest operations that the destObject will allow e.g. get\n * @return {Object}            \n */\nfunction mixin(destObject, operations) {\n    operations.forEach(function (property) {\n        destObject[property] = restFunctions[property];\n    });\n    return destObject;\n}\n\n/**\n * restFunctions Object containing the REST CRUD methods and paypal specific REST methods that\n * are shared between at least two of the REST endpoints, otherwise the function\n * will be defined within the resource definition itself\n * @type {Object}\n */\nvar restFunctions = {\n    create: function create(data, config, cb) {\n        api.executeHttp('POST', this.baseURL, data, config, cb);\n    },\n    get: function get(id, config, cb) {\n        api.executeHttp('GET', this.baseURL + id, {}, config, cb);\n    },\n    list: function list(data, config, cb) {\n        if (typeof data === 'function') {\n            config = data;\n            data = {};\n        }\n        api.executeHttp('GET', this.baseURL, data, config, cb);\n    },\n    del: function del(id, config, cb) {\n        api.executeHttp('DELETE', this.baseURL + id, {}, config, cb);\n    },\n    //provided for compatibility with 0.* versions\n    delete: function del(id, config, cb) {\n        api.executeHttp('DELETE', this.baseURL + id, {}, config, cb);\n    },\n    capture: function capture(id, data, config, cb) {\n        api.executeHttp('POST', this.baseURL + id + '/capture', data, config, cb);\n    },\n    refund: function refund(id, data, config, cb) {\n        api.executeHttp('POST', this.baseURL + id + '/refund', data, config, cb);\n    },\n    update: function update(id, data, config, cb) {\n        api.executeHttp('PATCH', this.baseURL + id, data, config, cb);\n    },\n    cancel: function cancel(id, data, config, cb) {\n        api.executeHttp('POST', this.baseURL + id + '/cancel', data, config, cb);\n    }\n};\n\nmodule.exports.mixin = mixin;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/Sale.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\n\n/**\n * Completed payments are referred to as sale transactions\n * @return {Object} sale functions\n */\nfunction sale() {\n    var baseURL = '/v1/payments/sale/';\n    var operations = ['get', 'refund'];\n\n    var ret = {\n        baseURL: baseURL\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = sale;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/Refund.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\n\n/**\n * Refunds on direct and captured payments\n * @return {Object} refund functions\n */\nfunction refund() {\n    var baseURL = '/v1/payments/refund/';\n    var operations = ['get'];\n\n    var ret = {\n        baseURL: baseURL\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = refund;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/Authorization.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\n\n/**\n * Retrieving, capturing, voiding, and reauthorizing previously created authorizations\n * @return {Object} authorization functions\n */\nfunction authorization() {\n    var baseURL = '/v1/payments/authorization/';\n    var operations = ['get', 'capture'];\n\n    var ret = {\n        baseURL: baseURL,\n        /**\n         * Void a previously authorized payment\n         * @param  {String}   id     authorization identifier\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb        \n         * @return {Object}          Authorization object\n         */\n        void: function voidAuthorization(id, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/void', {}, config, cb);\n        },\n        /**\n         * Reauthorize a PayPal account payment\n         * @param  {String}   id     authorization identifier\n         * @param  {object}   data   amount object with total e.g. 7.00 and currency e.g. USD\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb     \n         * @return {}          \n         */\n        reauthorize: function reauthorize(id, data, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/reauthorize', data, config, cb);\n        },\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = authorization;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/Capture.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\n\n/**\n * Look up and refund captured payments\n * @return {Object} capture functions\n */\nfunction capture() {\n    var baseURL = '/v1/payments/capture/';\n    var operations = ['get', 'refund'];\n\n    var ret = {\n        baseURL: baseURL\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = capture;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/Order.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\n\n/**\n * Take action on a payment with the intent of order\n * @return {Object} order functions\n */\nfunction order() {\n    var baseURL = '/v1/payments/orders/';\n    var operations = ['get', 'capture'];\n\n    var ret = {\n        baseURL: baseURL,\n        /**\n         * Void an existing order\n         * @param  {String}   id     Order identifier\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb        \n         * @return {Object}          Order object, with state set to voided\n         */\n        void: function voidOrder(id, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/do-void', {}, config, cb);\n        },\n        /**\n         * Authorize an order\n         * @param  {String}   id     Order identifier\n         * @param  {Object}   data   Amount object with total and currency\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb \n         * @return {Object}          Authorization object\n         */\n        authorize: function authorize(id, data, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/authorize', data, config, cb);\n        },\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = order;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/Payout.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\n\n/**\n * Make payouts to multiple PayPal accounts, or multiple payments to same PayPal account\n * @return {Object} payout functions\n */\nfunction payout() {\n    var baseURL = '/v1/payments/payouts/';\n    var operations = ['get'];\n\n    var ret = {\n        baseURL: baseURL,\n        /**\n         * Create a batch(asynchronous) or single(synchronous) payout\n         * @param  {Object}   data      payout details\n         * @param  {String}   sync_mode true for synchronous payouts, false by default\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb\n         * @return {Object}             Payout object\n         */\n        create: function create(data, sync_mode, config, cb) {\n            cb = (typeof sync_mode === 'function') ? sync_mode : cb;\n            sync_mode = (typeof sync_mode === 'string' && sync_mode === 'true') ? 'true' : 'false';\n            api.executeHttp('POST', this.baseURL + \"?\" + \"sync_mode=\" + sync_mode, data, config, cb);\n        }\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = payout;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/PayoutItem.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\n\n/**\n * An individual Payout item\n * @return {Object} payout object functions\n */\nfunction payoutItem() {\n    var baseURL = '/v1/payments/payouts-item/';\n    var operations = ['get'];\n\n    var ret = {\n        baseURL: baseURL,\n        /**\n         * Cancel an existing payout/transaction in UNCLAIMED state\n         * Explicitly define `cancel` method here to avoid having to pass in an empty `data` parameter\n         * as required by the generated generic `cancel` operation.\n         * \n         * @param  {String}   id     Payout item id\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb\n         * @return {Object}          Payout item details object with transaction status of RETURNED\n         */\n        cancel: function cancel(id, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/cancel', {}, config, cb);\n        }\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = payoutItem;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/BillingPlan.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\n\n/**\n * Create planned sets of future recurring payments at periodic intervals (sometimes known as “subscriptions”).\n * @return {Object} billing plan functions\n */\nfunction billingPlan() {\n    var baseURL = '/v1/payments/billing-plans/';\n    var operations = ['create', 'get', 'list', 'update'];\n\n    var ret = {\n        baseURL: baseURL,\n        /**\n         * Activate a billing plan so that it can be used to form\n         * billing agreements with users\n         * @param  {String}   id     Billing plan identifier\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb     \n         * @return {}          Returns the HTTP status of 200 if the call is successful\n         */\n        activate: function activate(id, config, cb) {\n            var activate_attributes = [\n                {\n                    \"op\": \"replace\",\n                    \"path\": \"/\",\n                    \"value\": {\n                        \"state\": \"ACTIVE\"\n                    }\n                }\n            ];\n            api.executeHttp('PATCH', this.baseURL + id, activate_attributes, config, cb);\n        }\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = billingPlan;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/BillingAgreement.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\n\n/**\n * The billing agreements allows merchants to have users agree to be billed\n * for billing plans\n * @return {Object} billing agreement functions\n */\nfunction billingAgreement() {\n    var baseURL = '/v1/payments/billing-agreements/';\n    var operations = ['create', 'get', 'update', 'cancel'];\n\n    /**\n     * Search for transactions within a billing agreement\n     * @param  {String}   id         Identifier of the agreement resource for which to list transactions.\n     * @param  {String}   start_date YYYY-MM-DD start date of range of transactions to list\n     * @param  {String}   end_date   YYYY-MM-DD end date of range of transactions to list\n     * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n     * @param  {Function} cb         \n     * @return {Object}              agreement transaction list, array of agreement transaction objects\n     */\n    function searchTransactions(id, start_date, end_date, config, cb) {\n        var date_range = {\n            \"start_date\": start_date,\n            \"end_date\": end_date\n        };\n        api.executeHttp('GET', baseURL + id + '/transactions', date_range, config, cb);\n    }\n\n    /**\n     * Bill outstanding balance of an agreement\n     * @param  {String}   id     Identifier of the agreement resource for which to bill balance\n     * @param  {Object}   data   Agreement state descriptor, fields include note and amount which has two attributes, value and currency\n     * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n     * @param  {Function} cb      \n     * @return {}          Returns the HTTP status of 204 if the call is successful\n     */\n    function billBalance(id, data, config, cb) {\n        api.executeHttp('POST', baseURL + id + '/bill-balance', data, config, cb);\n    }\n\n    /**\n     * Set the outstanding amount of an agreement\n     * @param  {String}   id     Identifier of the agreement resource for which to set balance\n     * @param  {Object}   data   Two attributes currency e.g. \"USD\" and value e.g. \"100\"\n     * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n     * @param  {Function} cb\n     * @return {}          Returns the HTTP status of 204 if the call is successful\n     */\n    function setBalance(id, data, config, cb) {\n        api.executeHttp('POST', baseURL + id + '/set-balance', data, config, cb);\n    }\n\n    var ret = {\n        baseURL: baseURL,\n        /**\n         * Execute an agreement after the buyer approves it\n         * @param  {String}   token  Payment Token of format EC-XXXXXX, appended to return url as a parameter after buyer approves agreement\n         * @param  {Object|Function}   data Empty object or callback. Optional, will be removed in next major release. \n         * @param  {Object|Function}   config Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb     \n         * @return {Object}          agreement object\n         */\n        execute: function execute(token, data, config, cb) {\n            //support case where neither data nor config is provided\n            if (typeof data === \"function\" && arguments.length === 2) {\n                cb = data;\n                data = {};\n            }\n            api.executeHttp('POST', this.baseURL + token + '/agreement-execute', data, config, cb);\n        },\n        /**\n         * Changes agreement state to suspended, can be reactivated unlike cancelling agreement\n         * @param  {String}   id     Identifier of the agreement resource for which to suspend\n         * @param  {Object}   data   Add note attribute, reason for changing state of agreement\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb\n         * @return {}          Returns the HTTP status of 204 if the call is successful\n         */\n        suspend: function suspend(id, data, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/suspend', data, config, cb);\n        },\n        /**\n         * Reactivate a suspended agreement\n         * @param  {String}   id     Identifier of the agreement resource for which to reactivate\n         * @param  {Object}   data   Add note attribute, reason for changing state of agreement\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb\n         * @return {}          Returns the HTTP status of 204 if the call is successful\n         */\n        reactivate: function reactivate(id, data, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/re-activate', data, config, cb);\n        },\n        billBalance: billBalance,\n        setBalance: setBalance,\n        searchTransactions: searchTransactions,\n        //entries below are deprecated but provided for compatibility with 0.* versions\n        bill_balance: billBalance,\n        set_balance: setBalance,\n        search_transactions: searchTransactions\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\nmodule.exports = billingAgreement;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/CreditCard.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\n\n/**\n * Store credit cards information securely in vault\n * @return {Object} Credit Card functions\n */\nfunction creditCard() {\n    var baseURL = '/v1/vault/credit-cards/';\n    var operations = ['create', 'get', 'update', 'del', 'delete', 'list'];\n\n    var ret = {\n        baseURL: baseURL\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = creditCard;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/Invoice.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\n\n/**\n * Create, send and manage invoices, PayPal emails the customer with link to invoice\n * on PayPal's website. Customers can pay with PayPal, check, debit or credit card.\n * @return {Invoice} Invoice functions\n */\nfunction invoice() {\n    var baseURL = '/v1/invoicing/invoices/';\n    var operations = ['create', 'get', 'list', 'del', 'delete', 'cancel'];\n\n    var ret = {\n        baseURL: baseURL,\n        search: function search(data, config, cb) {\n            api.executeHttp('POST', '/v1/invoicing/search', data, config, cb);\n        },\n        update: function update(id, data, config, cb) {\n            api.executeHttp('PUT', this.baseURL + id, data, config, cb);\n        },\n        send: function send(id, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/send', {}, config, cb);\n        },\n        remind: function remind(id, data, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/remind', data, config, cb);\n        },\n        recordPayment: function recordPayment(id, data, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/record-payment', data, config, cb);\n        },\n        recordRefund: function recordRefund(id, data, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/record-refund', data, config, cb);\n        },\n        deleteExternalPayment: function deleteExternalPayment(invoiceId, transactionId, config, cb) {\n            api.executeHttp('DELETE', this.baseURL + invoiceId + '/payment-records/' + transactionId, {}, config, cb);\n        },\n        deleteExternalRefund: function deleteExternalRefund(invoiceId, transactionId, config, cb) {\n            api.executeHttp('DELETE', this.baseURL + invoiceId + '/refund-records/' + transactionId, {}, config, cb);\n        },\n        generateNumber: function generateNumber(config, cb) {\n            api.executeHttp(\"POST\", this.baseURL + '/next-invoice-number', {}, config, cb);\n        },\n        /* Specify invoice ID to get a QR code corresponding to the invoice */\n        qrCode: function qrCode(id, height, width, config, cb) {\n            var image_attributes = {\n                \"height\": height,\n                \"width\": width\n            };\n            api.executeHttp('GET', this.baseURL + id + '/qr-code', image_attributes, config, cb);\n        }\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = invoice;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/InvoiceTemplate.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\n\nfunction invoiceTemplate() {\n    var baseURL = '/v1/invoicing/templates/';\n    var operations = ['create', 'get', 'list', 'delete'];\n\n    var ret = {\n        baseURL: baseURL,\n        update: function update(id, data, config, cb) {\n            api.executeHttp('PUT', this.baseURL + id, data, config, cb);\n        }\n    };\n\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = invoiceTemplate;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/OpenIdConnect.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\nvar configuration = require('../configure');\nvar client = require('../client');\nvar utils = require('../utils');\nvar querystring = require('querystring');\n\n/**\n * Sets up request body for open id connect module requests\n * @param  {String}   path              url endpoint\n * @param  {Object}   data              Payload for HTTP Request\n * @param  {Object|Function}   config   Configuration parameters such as authorization code or refresh token\n * @param  {Function} cb     \n */\nfunction openIdConnectRequest(path, data, config, cb) {\n    var http_options = {\n        schema: config.openid_connect_schema || configuration.default_options.openid_connect_schema,\n        host: utils.getDefaultApiEndpoint(config.mode) || config.openid_connect_host,\n        port: config.openid_connect_port || configuration.default_options.openid_connect_port,\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/x-www-form-urlencoded'\n        }\n    };\n\n    //Populate Basic Auth header only for endpoints that need it such as tokeninfo\n    if (data.client_id && data.client_secret) {\n        http_options.headers.Authorization = 'Basic ' + new Buffer(data.client_id + ':' + data.client_secret).toString('base64');\n    }\n\n    client.invoke('POST', path, querystring.stringify(data), http_options, cb);\n}\n\n/**\n * @param  {Object} config Configurations for settings and Auth\n * @return {String}        client id\n */\nfunction getClientId(config) {\n    return config.openid_client_id || config.client_id ||\n        configuration.default_options.openid_client_id || configuration.default_options.client_id;\n}\n\n/**\n * @param  {Object} config Configurations for settings and Auth\n * @return {String}        client secret\n */\nfunction getClientSecret(config) {\n    return config.openid_client_secret || config.client_secret ||\n        configuration.default_options.openid_client_secret || configuration.default_options.client_secret;\n}\n\n/**\n * Configurations for settings and Auth\n * @return {String}        redirect uri\n */\nfunction getRedirectUri(config) {\n    return config.openid_redirect_uri || configuration.default_options.openid_redirect_uri;\n}\n\n/**\n * Obtain a user’s consent to make Identity API calls on their behalf by redirecting them\n * to authorization endpoint\n * @param  {Data}   data      Payload associated with API request\n * @param  {Object} config    Configurations for settings and Auth\n * @return {String}        authorize url\n */\nfunction authorizeUrl(data, config) {\n    config = config || configuration.default_options;\n    data   = data || {};\n\n    //Use mode provided, live or sandbox to construct authorize_url, sandbox is default\n    var url = 'https://www.' + utils.getDefaultEndpoint(config.mode) + '/signin/authorize' || config.authorize_url;\n\n    data = utils.merge({\n        'client_id': getClientId(config),\n        'scope': 'openid',\n        'response_type': 'code',\n        'redirect_uri': getRedirectUri(config)\n    }, data);\n\n    return url + '?' + querystring.stringify(data);\n}\n\n/**\n * Direct user to logout url to end session\n * @param  {Data}   data      Payload associated with API request\n * @param  {Object} config    Configurations for settings and Auth\n * @return {String}        logout url\n */\nfunction logoutUrl(data, config) {\n    config = config || configuration.default_options;\n    data   = data || {};\n\n    var url = 'https://www.' + utils.getDefaultEndpoint(config.mode) + '/webapps/auth/protocol/openidconnect/v1/endsession' || config.logout_url;\n\n    if (typeof data === 'string') {\n        data = { 'id_token': data };\n    }\n\n    data = utils.merge({\n        'logout': 'true',\n        'redirect_uri': getRedirectUri(config)\n    }, data);\n\n    return url + '?' + querystring.stringify(data);\n}\n\n/**\n * Grant a new access token, using a refresh token\n * @param  {Object}   data   Payload associated with API request\n * @param  {Object|Function}   config Configurations for settings and Auth\n * @param  {Function} cb     Callback function\n */\nfunction tokenInfoRequest(data, config, cb) {\n\n    if (typeof config === 'function') {\n        cb = config;\n        config = configuration.default_options;\n    } else if (!config) {\n        config = configuration.default_options;\n    }\n\n    data = utils.merge({\n        'client_id': getClientId(config),\n        'client_secret': getClientSecret(config)\n    }, data);\n\n    openIdConnectRequest('/v1/identity/openidconnect/tokenservice', data, config, cb);\n}\n\n/**\n * Retrieve user profile attributes\n * @param  {Object}   data   Payload associated with API request\n * @param  {Object|Function}   config Configurations for settings and Auth\n * @param  {Function} cb     Callback function\n */\nfunction userInfoRequest(data, config, cb) {\n    if (typeof config === 'function') {\n        cb = config;\n        config = configuration.default_options;\n    } else if (!config) {\n        config = configuration.default_options;\n    }\n\n    if (typeof data === 'string') {\n        data = { 'access_token': data };\n    }\n\n    data = utils.merge({\n        'schema': 'openid'\n    }, data);\n\n    openIdConnectRequest('/v1/identity/openidconnect/userinfo', data, config, cb);\n}\n\n/**\n * Use log in with PayPal to avoid storing user data on the system\n * @return {Object} openidconnect functions\n */\nfunction openIdConnect() {\n    return {\n        tokeninfo: {\n            create: function (data, config, cb) {\n                if (typeof data === 'string') {\n                    data = { 'code': data };\n                }\n                data.grant_type = 'authorization_code';\n                tokenInfoRequest(data, config, cb);\n            },\n            refresh: function (data, config, cb) {\n                if (typeof data === 'string') {\n                    data = { 'refresh_token': data };\n                }\n                data.grant_type = 'refresh_token';\n                tokenInfoRequest(data, config, cb);\n            }\n        },\n        authorizeUrl: authorizeUrl,\n        logoutUrl: logoutUrl,\n        userinfo: {\n            get: userInfoRequest\n        },\n        //entries below are deprecated but provided for compatibility with 0.* versions\n        authorize_url: authorizeUrl,\n        logout_url: logoutUrl\n    };\n}\n\nmodule.exports = openIdConnect;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/WebProfile.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\n\n/**\n * Exposes REST endpoints for providing a customizing Paypal checkout\n * flow for users, supports features such as noshipping.\n *\n * https://developer.paypal.com/webapps/developer/docs/integration/direct/rest-experience-overview/\n * @return {Object} web profile functions\n */\nfunction webProfile() {\n    var baseURL = '/v1/payment-experience/web-profiles/';\n    var operations = ['create', 'list', 'get', 'del', 'delete'];\n\n    var ret = {\n        baseURL: baseURL,\n        /**\n         * Update an experience profile\n         * @param  {String}   id     Web Profile Id\n         * @param  {Object}   data   Object with name, flow_config, input_fields and presentation\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb     \n         * @return {}          Returns the HTTP status of 204 if the call is successful\n         */\n        update: function update(id, data, config, cb) {\n            api.executeHttp('PUT', this.baseURL + id, data, config, cb);\n        },\n        /**\n         * Partially update a web experience profile\n         * @param  {String}   id     Web Profile Id\n         * @param  {Array}   data   Array of patch request objects (operation, path, value, from)\n         * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n         * @param  {Function} cb \n         * @return {}          Returns the HTTP status of 204 if the call is successful\n         */\n        replace: function replace(id, data, config, cb) {\n            api.executeHttp('PATCH', this.baseURL + id, data, config, cb);\n        },\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\nmodule.exports = webProfile;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/lib/resources/Notification.js":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\nvar api = require('../api');\nvar https = require('https');\nvar crypto = require('crypto');\nvar crc32 = require('buffer-crc32');\n\n/**\n * Exposes REST endpoints for creating and managing webhooks\n * @return {Object} webhook functions\n */\nfunction webhook() {\n    var baseURL = '/v1/notifications/webhooks/';\n    var operations = ['create', 'list', 'get', 'del', 'delete'];\n\n    var ret = {\n        baseURL: baseURL,\n        replace: function replace(id, data, config, cb) {\n            api.executeHttp('PATCH', this.baseURL + id, data, config, cb);\n        },\n        eventTypes: function eventTypes(id, config, cb) {\n            api.executeHttp('GET', this.baseURL + id + '/event-types', {}, config, cb);\n        }\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\n/**\n * Exposes REST endpoints for working with subscribed webhooks events\n *\n * https://developer.paypal.com/webapps/developer/docs/integration/direct/rest-webhooks-overview/#events\n * @return {Object} webhook event functions\n */\nfunction webhookEvent() {\n    var baseURL = '/v1/notifications/webhooks-events/';\n    var operations = ['list', 'get'];\n\n    /**\n     * Instead of calling this method, it is recommended that you initiate a GET request in your code for the webhook\n     * event data and use the returned information from the webhook or use the updated verify() function. See\n     * https://github.com/paypal/PayPal-node-SDK/wiki/Webhook-Validation\n     *\n     * @example\n     * var paypal = require('paypal-rest-sdk');\n     * function(request, response) {\n     *     try {\n     *         // Get the Webhook event id from the incoming event request\n     *         var webhookEventId = JSON.parse(request.body).id;\n     *\n     *         paypal.notification.webhookEvent.get(webhookEventId, function (error, webhookEvent) {\n     *             if (error) {\n     *                 console.log(error);\n     *                 // The webhook event data could not be found.\n     *                 // Send a HTTP 503 response status code ( http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4 )\n     *                 // to signal to PayPal to resend the request at a later time.\n     *                 response.sendStatus(503);\n     *             } else {\n     *                 // Proceed to use the data from PayPal\n     *                 console.log(\"Get webhookEvent Response\");\n     *                 console.log(JSON.stringify(webhookEvent));\n     *                 response.sendStatus(200);\n     *             }\n     *         });\n     *     } catch (e) {\n     *         // The webhook id could not be found or any other error occurred.\n     *         // Send a HTTP 503 response status code ( http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4 )\n     *         // to signal to PayPal to resend the request at a later time\n     *         response.sendStatus(503);\n     *     }\n     * }\n     *\n     * @deprecated\n     * @param  {String}   body raw body of request\n     * @param  {Function} cb   callback function\n     */\n    function getAndVerify(body, cb) {\n        var response = false;\n        var err = null;\n        try {\n            var webhookEventId = JSON.parse(body).id;\n            api.executeHttp('GET', baseURL + webhookEventId, {}, function (error, res) {\n                if (error) {\n                    cb(error, response);\n                } else {\n                    cb(err, true);\n                }\n            });\n        } catch (e) {\n            err = new Error(\"Webhook Event Id attribute not found. Possible reason could be invalid JSON Object.\");\n            cb(err, response);\n        }\n    }\n\n    /**\n     * @param {Object} headers from request\n     * @param {String} raw body of request\n     * @param {String} webhook id\n     * @param {Function} callback function\n     */\n    function verify(headers, body, webhookId, callback) {\n        // In an effort not to break existing applications, accept old arguments temporarily\n        if (arguments.length > 4) {\n            /* jshint validthis: true */\n            return verifyLegacy.apply(this, arguments);\n        }\n\n        if (typeof headers !== 'object') {\n            return callback(new Error(\"headers is not an object\"), false);\n        }\n\n        // Normalizes headers\n        Object.keys(headers).forEach(function (header) {\n            headers[header.toUpperCase()] = headers[header];\n        });\n\n        var webhookEventBody = (typeof body === \"string\") ? JSON.parse(body) : body;\n\n        var payload = {\n            'auth_algo': headers['PAYPAL-AUTH-ALGO'],\n            'cert_url': headers['PAYPAL-CERT-URL'],\n            'transmission_id': headers['PAYPAL-TRANSMISSION-ID'],\n            'transmission_sig': headers['PAYPAL-TRANSMISSION-SIG'],\n            'transmission_time': headers['PAYPAL-TRANSMISSION-TIME'],\n            'webhook_id': webhookId,\n            'webhook_event': webhookEventBody\n        };\n\n        api.executeHttp('POST', '/v1/notifications/verify-webhook-signature', payload, callback);\n    }\n\n    function verifyLegacy(certURL, transmissionId, timeStamp, webhookId, eventBody, ppTransmissionSig, cb) {\n        // Emit a warning that the arguments have changed\n        if (process.env.NODE_ENV === 'development') {\n            console.log('PayPal-Node-SDK: Webhook verify arguments have changed. Please check the latest documentation on https://developer.paypal.com/docs/integration/direct/rest-webhooks-overview/#event-signature.');\n        }\n\n        var headers = {\n            // This is currently the default auth algorithm. If this changes, need to change. Legacy method did\n            // not pass in the algorithm.\n            'PAYPAL-AUTH-ALGO': 'SHA256withRSA',\n            'PAYPAL-CERT-URL': certURL,\n            'PAYPAL-TRANSMISSION-ID': transmissionId,\n            'PAYPAL-TRANSMISSION-SIG': ppTransmissionSig,\n            'PAYPAL-TRANSMISSION-TIME': timeStamp\n        };\n\n        function legacyCallback(error, response) {\n            if (error) {\n                cb(error, false);\n            } else {\n                // Verification status must be SUCCESS\n                if (response.verification_status === \"SUCCESS\") {\n                    cb(null, true);\n                } else {\n                    cb(null, false);\n                }\n            }\n        }\n\n        return verify(headers, eventBody, webhookId, legacyCallback);\n    }\n\n    var ret = {\n        baseURL: baseURL,\n        verify: verify,\n        getAndVerify: getAndVerify,\n        resend: function resend(id, config, cb) {\n            api.executeHttp('POST', this.baseURL + id + '/resend', {}, config, cb);\n        }\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\n/**\n * Exposes REST endpoint for listing available event types for webhooks\n * @return {Object} webhook event type functions\n */\nfunction webhookEventType() {\n    var baseURL = '/v1/notifications/webhooks-event-types/';\n    var operations = ['list'];\n\n    var ret = {\n        baseURL: baseURL\n    };\n    ret = generate.mixin(ret, operations);\n    return ret;\n}\n\n/**\n * Exposes the namespace for webhook and webhook event functionalities\n * \n * https://developer.paypal.com/webapps/developer/docs/api/#notifications\n * @return {Object} notification functions\n */\nfunction notification() {\n    return {\n        webhook: webhook(),\n        webhookEvent: webhookEvent(),\n        webhookEventType: webhookEventType()\n    };\n}\n\nmodule.exports = notification;\n","/home/travis/build/npmtest/node-npmtest-paypal-rest-sdk/node_modules/paypal-rest-sdk/Gruntfile.js":"module.exports = function (grunt) {\n\n\t\"use strict\";\n\n\t// Project configuration.\n\tgrunt.initConfig({\n\t\tpkg: grunt.file.readJSON(\"package.json\"),\n\t\tmeta: {\n\t\t\tbanner: \"/*!\\n * <%= pkg.name %>\\n * <%= pkg.description %>\\n * @version <%= pkg.version %> - <%= grunt.template.today(\\'yyyy-mm-dd\\') %>\\n * @author <%= pkg.author.name %> <<%= pkg.author.url %>>\\n */\\n\"\n\t\t},\n\t\tjshint: {\n\t\t\tall: {\n\t\t\t\tsrc: [\"lib/*.js\", \"test/*.js\", \"samples/**/*.js\", \"lib/resources/*.js\"],\n\t\t\t\toptions: {\n\t\t\t\t\tjshintrc: \".jshintrc\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsimplemocha: {\n\t\t\toptions: {\n\t\t\t\ttimeout: 15000,\n\t\t\t\treporter: 'dot'\n\t\t\t},\n\t\t\tall: {\n\t\t\t\tsrc: 'test/*.js'\n\t\t\t}\n\t\t},\n\t\tjsdoc : {\n\t\t\tdist : {\n\t\t\t\tsrc: ['lib/*'],\n\t\t\t\tjsdoc: './node_modules/.bin/jsdoc',\n\t\t\t\toptions: {\n\t\t\t\t\tdestination: 'docs/jsdoc/',\n\t\t\t\t\tconfigure: './node_modules/jsdoc/conf.json',\n\t\t\t\t\ttemplate: './node_modules/ink-docstrap/template'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Load grunt tasks from npm packages\n\tgrunt.loadNpmTasks(\"grunt-contrib-jshint\");\n\tgrunt.loadNpmTasks('grunt-simple-mocha');\n\tgrunt.loadNpmTasks('grunt-jsdoc');\n\n\t// Test task\n\tgrunt.registerTask(\"test\", [\"simplemocha\"]);\n\n\t// Default task.\n\tgrunt.registerTask(\"default\", [\"jshint\", \"simplemocha\"]);\n\n};\n"}